import heapq

class PreemptiveSJF:

    def processData(self, no_of_processes):
        process_data = []
        for i in range(no_of_processes):
            temporary = []
            process_id = int(input("Enter Process ID: "))
            arrival_time = int(input(f"Enter Arrival Time for Process {process_id}: "))
            burst_time = int(input(f"Enter Burst Time for Process {process_id}: "))
            temporary.extend([process_id, arrival_time, burst_time, burst_time, 0]) # Remaining burst time
            process_data.append(temporary)
        self.schedulingProcess(process_data)

    def schedulingProcess(self, process_data):
        current_time = 0
        total_burst_time = sum([process_data[i][2] for i in range(len(process_data))])
        ready_queue = []  # Priority queue for ready processes based on remaining burst time
        completed_processes = []
        
        while current_time < total_burst_time:
            for i in range(len(process_data)):
                if process_data[i][1] <= current_time and process_data[i][3] > 0:
                    heapq.heappush(ready_queue, (process_data[i][3], process_data[i][0])) # Push (remaining burst time, process_id) in the priority queue
                    process_data[i][3] = 0  # Set the remaining burst time to 0, indicating the process is finished
            if ready_queue:
                remaining_burst_time, process_id = heapq.heappop(ready_queue) # Get the process with the shortest remaining burst time
                current_time += remaining_burst_time  # Update current time
                process_data[process_id - 1][3] -= remaining_burst_time  # Update remaining burst time for the completed part
                completed_processes.append((process_id, current_time))
            else:
                current_time += 1  # No process is ready, move to the next time unit
        
        self.printGanttChart(completed_processes)
        t_time = self.calculateTurnaroundTime(process_data)
        w_time = self.calculateWaitingTime(process_data)
        self.printData(process_data, t_time, w_time)

    def calculateTurnaroundTime(self, process_data):
        total_turnaround_time = 0
        for i in range(len(process_data)):
            turnaround_time = process_data[i][4] - process_data[i][1]
            total_turnaround_time += turnaround_time
            process_data[i].append(turnaround_time)
        average_turnaround_time = total_turnaround_time / len(process_data)
        return average_turnaround_time

    def calculateWaitingTime(self, process_data):
        total_waiting_time = 0
        for i in range(len(process_data)):
            waiting_time = process_data[i][5] - process_data[i][2]
            total_waiting_time += waiting_time
            process_data[i].append(waiting_time)
        average_waiting_time = total_waiting_time / len(process_data)
        return average_waiting_time

    def printData(self, process_data, average_turnaround_time, average_waiting_time):
        process_data.sort(key=lambda x: x[0])
        print("\nProcess_ID  Arrival_Time  Burst_Time      Completed  Completion_Time  Turnaround_Time  Waiting_Time")
        for i in range(len(process_data)):
            for j in range(6):
                print(process_data[i][j], end="\t\t\t")
            print()

        print(f"\nAverage Turnaround Time: {average_turnaround_time}")
        print(f"Average Waiting Time: {average_waiting_time}")

    def printGanttChart(self, completed_processes):
        print("\nGantt Chart")
        print("-" * 40)
        print("| Process ID |   Completion Time   |")
        print("-" * 40)
        for process_id, completion_time in completed_processes:
            print(f"|     P{process_id}     |         {completion_time}         |")
            print("-" * 40)


if __name__ == "__main__":
    no_of_processes = int(input("Enter number of processes: "))
    sjf = PreemptiveSJF()
    sjf.processData(no_of_processes)
